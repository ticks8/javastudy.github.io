<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ticks8.github.io</id>
    <title>Gridea</title>
    <updated>2020-12-19T08:37:04.365Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ticks8.github.io"/>
    <link rel="self" href="https://ticks8.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ticks8.github.io/images/avatar.png</logo>
    <icon>https://ticks8.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[dfxvbgdf]]></title>
        <id>https://ticks8.github.io/post/dfxvbgdf/</id>
        <link href="https://ticks8.github.io/post/dfxvbgdf/">
        </link>
        <updated>2020-12-19T08:36:54.000Z</updated>
        <content type="html"><![CDATA[<p>frth</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ArrayList扩容]]></title>
        <id>https://ticks8.github.io/post/arraylist-kuo-rong/</id>
        <link href="https://ticks8.github.io/post/arraylist-kuo-rong/">
        </link>
        <updated>2020-12-18T06:20:59.000Z</updated>
        <content type="html"><![CDATA[<p>test</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sychornized和volatile]]></title>
        <id>https://ticks8.github.io/post/sychornized-he-volatile/</id>
        <link href="https://ticks8.github.io/post/sychornized-he-volatile/">
        </link>
        <updated>2020-12-17T05:02:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="sychornized">sychornized</h3>
<p>Sychornized在语句块前加和在方法前加是不一样的。</p>
<h4 id="a在语句块前加">a.在语句块前加</h4>
<p><img src="https://ticks8.github.io/post-images/1608366987348.png" alt="" loading="lazy"><br>
synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。</p>
<p>在执行monitorenter时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。</p>
<p>在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。</p>
<h4 id="b在方法前加">b.在方法前加</h4>
<p><img src="https://ticks8.github.io/post-images/1608366896220.png" alt="" loading="lazy"><br>
synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p>
<h3 id="volatile">volatile</h3>
<p>volatile保证可见性<br>
首先让我们看一下jmm模型<br>
<img src="https://ticks8.github.io/post-images/1608366906163.png" alt="" loading="lazy"><br>
在 JDK1.2 之前，Java 的内存模型实现总是从主存（即共享内存）读取变量，是不需要进行特别的注意的。而在当前的 Java 内存模型下，线程可以把变量保存本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。<br>
而用了volatile后则变成这样<br>
<img src="https://ticks8.github.io/post-images/1608366914293.png" alt="" loading="lazy"><br>
volatile保证有序性</p>
<pre><code>public class Singleton {

    private volatile static Singleton uniqueInstance;

    private Singleton() {
    }

    public  static Singleton getUniqueInstance() {
       //先判断对象是否已经实例过，没有实例化过才进入加锁代码
        if (uniqueInstance == null) {
            //类对象加锁
            synchronized (Singleton.class) {
                if (uniqueInstance == null) {
                    uniqueInstance = new Singleton();
                }
            }
        }
        return uniqueInstance;
    }
}
</code></pre>
<p>这段代码其实是分为三步执行：</p>
<p>为 uniqueInstance 分配内存空间<br>
初始化 uniqueInstance<br>
将 uniqueInstance 指向分配的内存地址</p>
<p>由于 JVM 具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 T1 执行了 1 和 3，此时 T2 调用 getUniqueInstance() 后发现 uniqueInstance 不为空，因此返回 uniqueInstance，但此时 uniqueInstance 还未被初始化。</p>
<p>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IO流【字节流和字符流】]]></title>
        <id>https://ticks8.github.io/post/io-liu-zi-jie-liu-he-zi-fu-liu/</id>
        <link href="https://ticks8.github.io/post/io-liu-zi-jie-liu-he-zi-fu-liu/">
        </link>
        <updated>2020-12-09T07:58:56.000Z</updated>
        <content type="html"><![CDATA[<p>InputStream 和OutputStream,两个是为字节流设计的,主要用来处理字节或二进制对象,<br>
Reader和 Writer.两个是为字符流（一个字符占两个字节）设计的,主要用来处理字符或字符串.<br>
余下待写</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[final、finally与finalize的区别]]></title>
        <id>https://ticks8.github.io/post/finalfinally-yu-finalize-de-qu-bie/</id>
        <link href="https://ticks8.github.io/post/finalfinally-yu-finalize-de-qu-bie/">
        </link>
        <updated>2020-12-09T06:53:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1final">1.final</h3>
<h4 id="11修饰类">1.1修饰类</h4>
<p>表明该类不能被其他类继承</p>
<h4 id="12修饰方法">1.2修饰方法</h4>
<p>使用final方法的原因主要有两个：</p>
<p>(1) 把方法锁定，以防止继承类对其进行更改。</p>
<p>(2) 效率，在早期的java版本中，会将final方法转为内嵌调用。但若方法过于庞大，可能在性能上不会有多大提升。因此在最近版本中，不需要final方法进行这些优化了。final方法意味着“最后的、最终的”含义，即此方法不能被重写。</p>
<p>注意：若父类中final方法的访问权限为private，将导致子类中不能直接继承该方法，因此，此时可以在子类中定义相同方法名的函数，此时不会与重写final的矛盾，而是在子类中重新地定义了新方法。<br>
代码：</p>
<pre><code>class A{
    private final void getName(){

    }
}

public class B extends A{
    public void getName(){

    }

    public static void main(String[]args){
        System.out.println(&quot;OK&quot;);
    }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://ticks8.github.io/post-images/1607527490231.PNG" alt="" loading="lazy"></figure>
<h4 id="13-修饰变量">1.3 修饰变量</h4>
<p>final成员变量表示常量，只能被赋值一次，赋值后其值不再改变。类似于C++中的const。</p>
<p>final修饰一个成员变量（属性），必须要显示初始化。这里有两种初始化方式</p>
<h3 id="2finally">2.finally</h3>
<p>finally作为异常处理的一部分，它只能用在try/catch语句中，并且附带一个语句块。</p>
<p>finally不执行的情况<br>
　finally对应的try语句块得到执行的情况下，finally语句块才会执行。执行try语句块之前已经返回或抛出异常便不会执行finally里的内容，<br>
<img src="https://ticks8.github.io/post-images/1607528888192.PNG" alt="" loading="lazy"></p>
<h3 id="3finalize">3.finalize</h3>
<p>finalize()是在java.lang.Object里定义的，也就是说每一个对象都有这么个方法。这个方法在gc启动，该对象被回收的时候被调用。<br>
特殊情况下，需要程序员实现finalize，当对象被回收的时候释放一些资源，比如：一个socket链接，在对象初始化时创建，整个生命周期内有效，那么就需要实现finalize，关闭这个链接。<br>
　　使用finalize还需要注意一个事，调用super.finalize();</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java的多态详解]]></title>
        <id>https://ticks8.github.io/post/java-de-duo-tai-xiang-jie/</id>
        <link href="https://ticks8.github.io/post/java-de-duo-tai-xiang-jie/">
        </link>
        <updated>2020-12-09T05:19:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1多态的概念">1.多态的概念</h3>
<p>面向对象语言的三大特征是：封装 继承 多态。</p>
<blockquote>
<p>多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。</p>
</blockquote>
<h3 id="2多态应用实例">2.多态应用实例</h3>
<h4 id="a向上转型">a.向上转型</h4>
<pre><code>class A {
         public void print() {
                  System.out.println(&quot;A:print&quot;);
         }
}

class B extends A {
         public void print() {        
                  System.out.println(&quot;B:print&quot;);
         }
}

class C extends B {
         public void print() {        
                  System.out.println(&quot;C:print&quot;);
         }
}

public class Test{
         public static void func(A a)
         {
                  a.print();
         }

         public static void main(String args[])
         {
                  func(new B());  //等价于 A a =new B();
                  func(new C());  //等价于 C c =new C();
         }
}
</code></pre>
<p>运行结果<br>
<img src="https://ticks8.github.io/post-images/1607522385137.PNG" alt="" loading="lazy"></p>
<blockquote>
<p>可以看到打印的是class B的print,这是因为我们通过子类B去实例化的,所以父类A的print方法已经被子类B的print方法覆盖了.从而打印classB的print.<br>
PS:向上转型时,父类只能调用父类方法或者子类覆写后的方法,而子类中的单独方法则是无法调用的.</p>
</blockquote>
<h4 id="2向下转型">2.向下转型</h4>
<blockquote>
<p>在java中,向下转型则是为了,通过父类强制转换为子类,从而来调用子类独有的方法(向下转型,在工程中很少用到).<br>
为了保证向下转型的顺利完成,在java中提供了一个关键字:instanceof,通过instanceof可以判断某对象是否是某类的实例,如果是则返回true,否则为false</p>
</blockquote>
<pre><code>class A {
         public void print() {
                  System.out.println(&quot;A:print&quot;);
         }
}

class B extends A {
         public void print() {        
                  System.out.println(&quot;B:print&quot;);
         }
         public void funcB(){
                  System.out.println(&quot;funcB&quot;);
         }
}

class C extends A {
         public void print() {        
                  System.out.println(&quot;C:print&quot;);
         }
         public void funcC(){
                  System.out.println(&quot;funcC&quot;);
         }
}

public class Test{
         public static void func(A a)
         {
                  a.print();
                  if(a instanceof B)
                  {
                          B b = (B)a;   //向下转型,通过父类实例化子类
                          b.funcB();    //调用B类独有的方法
                  }
                  else if(a instanceof C)
                  {
                          C c = (C)a;  //向下转型,通过父类实例化子类
                          c.funcC();   //调用C类独有的方法
                  }
         }

         public static void main(String args[])
         {
                  func(new A());   
                  func(new B());
                  func(new C());
         }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://ticks8.github.io/post-images/1607523806806.PNG" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HashMap【结构、扩容、头插尾插】]]></title>
        <id>https://ticks8.github.io/post/hashmapjie-gou-kuo-rong-tou-cha-wei-cha/</id>
        <link href="https://ticks8.github.io/post/hashmapjie-gou-kuo-rong-tou-cha-wei-cha/">
        </link>
        <updated>2020-12-08T23:57:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1结构">1.结构</h3>
<p>1.7及之前是数组+链表，1.8是数组+链表+红黑树。</p>
<h3 id="2扩容只讲17版">2.扩容（只讲1.7版）</h3>
<p>源码解析：</p>
<pre><code>  public V put(K key, V value) {
        if (table == EMPTY_TABLE) {
            inflateTable(threshold);
        }
        if (key == null)
            return putForNullKey(value);
        int hash = hash(key);
        int i = indexFor(hash, table.length);
        for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) {
            Object k;
            if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) {
                V oldValue = e.value;
                e.value = value;
                e.recordAccess(this);
                return oldValue;
            }
        }
        modCount++;
        addEntry(hash, key, value, i);
        return null;
    }
</code></pre>
<p>从代码中可以看出若添加的数据的key是已经存在的那么新的value会替代旧的value，若是新的key值则执行addEntry(hash, key, value, i),接下来我们来看看addEntry(hash,key,value,i)的源码</p>
<pre><code> if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) {
            resize(2 * table.length);
            hash = (null != key) ? hash(key) : 0;
            bucketIndex = indexFor(hash, table.length);
        }
		// 1.2、若容量足够，则创建1个新的数组元素（Entry） 并放入到数组中
        createEntry(hash, key, value, bucketIndex);
        ~~~
resize(2*table.length)就是我们需要了解的扩容函数，接下来进入源码

</code></pre>
<pre><code>void resize(int newCapacity) {  

// 1、保存旧数组（old table） 
Entry[] oldTable = table;  

// 2、保存旧容量（old capacity ），即数组长度
int oldCapacity = oldTable.length; 

// 3、若旧容量已经是系统默认最大容量了，那么将阈值设置成整型的最大值，返回   
if (oldCapacity == MAXIMUM_CAPACITY) {  
    threshold = Integer.MAX_VALUE;  
    return;  
}  

// 4、根据新容量（2倍容量）新建1个数组，即newTable 
Entry[] newTable = new Entry[newCapacity];  

//5、将旧数组上的数据（键值对）转移到新table中，从而完成扩容
transfer(newTable, initHashSeedAsNeeded(newCapacity));
   
// 6、新数组table引用到HashMap的table属性上
table = newTable;
   
// 7、重新设置阈值 
threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);}
</code></pre>
<p>再看  transfer(newTable, initHashSeedAsNeeded(newCapacity))</p>
<pre><code> /**
   * 作用：将旧数组上的数据（键值对）转移到新table中，从而完成扩容
   * 过程：按旧链表的正序遍历链表、在新链表的头部依次插入。但是这样会导致扩容完成后，链表逆序
   */ 	
void transfer(Entry[] newTable, boolean rehash) {
        int newCapacity = newTable.length;
        //通过遍历 旧数组，将旧数组上的数据（键值对）转移到新数组中
        for (Entry&lt;K,V&gt; e : table) {
            while(null != e) {
                /*
                 1、遍历以该数组元素为首的链表
                 2、转移链表时，因是单链表，故要保存下1个结点，否则转移后链表会断开
                 */
                Entry&lt;K,V&gt; next = e.next;
                if (rehash) {
                    e.hash = null == e.key ? 0 : hash(e.key);
                }
                 //重新计算每个元素的存储位置
                int i = indexFor(e.hash, newCapacity);
                
                //这个地方暂时先放着，后面讲死循环链表的时候会讲到
                e.next = newTable[i];
                //讲当前元素，赋给新数组的对应下标位置。
                newTable[i] = e;
                // 访问下1个Entry链上的元素，如此不断循环，直到遍历完该链表上的所有节点
                e = next;
            }
        }
    }

</code></pre>
<p>transfer(Entry[] newTable, boolean rehash)，注意newTable的长度为原来的2倍，可以看出是用头插法把原数组的值插入新数组。</p>
<h3 id="q为什么hashmap多线程不安全呢">Q:为什么hashmap多线程不安全呢？</h3>
<pre><code>   因为hashmap用数组+链表。数组是固定长度，链表太长就需要扩充数组长度进行rehash减少链表长度。如果两个线程同时触发扩容，在移动节点时会导致一个链表中的2个节点相互引用，从而生成环链表
</code></pre>
<h3 id="q为什么hashmap数组长度要是2的幂呢">Q:为什么hashmap数组长度要是2的幂呢</h3>
<pre><code>   因为 n 永远是2的次幂，所以 n-1 通过 二进制表示，永远都是尾端以连续1的形式表示（00001111，00000011）
</code></pre>
<p>当(n - 1) 和 hash 做与运算时，会保留hash中 后 x 位的 1，<br>
例如 00001111 &amp; 10000011 = 00000011</p>
<p>这样做有2个好处</p>
<p>&amp;运算速度快，至少比%取模运算块<br>
能保证 索引值 肯定在 capacity 中，不会超出数组长度<br>
(n - 1) &amp; hash，当n为2次幂时，会满足一个公式：(n - 1) &amp; hash = hash % n</p>
]]></content>
    </entry>
</feed>