<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ticks8.github.io</id>
    <title>Gridea</title>
    <updated>2020-12-09T15:52:26.403Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ticks8.github.io"/>
    <link rel="self" href="https://ticks8.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ticks8.github.io/images/avatar.png</logo>
    <icon>https://ticks8.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[final、finally与finalize的区别]]></title>
        <id>https://ticks8.github.io/post/finalfinally-yu-finalize-de-qu-bie/</id>
        <link href="https://ticks8.github.io/post/finalfinally-yu-finalize-de-qu-bie/">
        </link>
        <updated>2020-12-09T06:53:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1final">1.final</h3>
<h4 id="11修饰类">1.1修饰类</h4>
<p>表明该类不能被其他类继承</p>
<h4 id="12修饰方法">1.2修饰方法</h4>
<p>使用final方法的原因主要有两个：</p>
<p>(1) 把方法锁定，以防止继承类对其进行更改。</p>
<p>(2) 效率，在早期的java版本中，会将final方法转为内嵌调用。但若方法过于庞大，可能在性能上不会有多大提升。因此在最近版本中，不需要final方法进行这些优化了。final方法意味着“最后的、最终的”含义，即此方法不能被重写。</p>
<p>注意：若父类中final方法的访问权限为private，将导致子类中不能直接继承该方法，因此，此时可以在子类中定义相同方法名的函数，此时不会与重写final的矛盾，而是在子类中重新地定义了新方法。<br>
代码：</p>
<pre><code>class A{
    private final void getName(){

    }
}

public class B extends A{
    public void getName(){

    }

    public static void main(String[]args){
        System.out.println(&quot;OK&quot;);
    }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://ticks8.github.io/post-images/1607527490231.PNG" alt="" loading="lazy"></figure>
<h4 id="13-修饰变量">1.3 修饰变量</h4>
<p>final成员变量表示常量，只能被赋值一次，赋值后其值不再改变。类似于C++中的const。</p>
<p>final修饰一个成员变量（属性），必须要显示初始化。这里有两种初始化方式</p>
<h3 id="2finally">2.finally</h3>
<p>finally作为异常处理的一部分，它只能用在try/catch语句中，并且附带一个语句块。</p>
<p>finally不执行的情况<br>
　finally对应的try语句块得到执行的情况下，finally语句块才会执行。执行try语句块之前已经返回或抛出异常便不会执行finally里的内容，<br>
<img src="https://ticks8.github.io/post-images/1607528888192.PNG" alt="" loading="lazy"></p>
<h3 id="3finalize">3.finalize</h3>
<p>finalize()是在java.lang.Object里定义的，也就是说每一个对象都有这么个方法。这个方法在gc启动，该对象被回收的时候被调用。<br>
特殊情况下，需要程序员实现finalize，当对象被回收的时候释放一些资源，比如：一个socket链接，在对象初始化时创建，整个生命周期内有效，那么就需要实现finalize，关闭这个链接。<br>
　　使用finalize还需要注意一个事，调用super.finalize();</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java的多态详解]]></title>
        <id>https://ticks8.github.io/post/java-de-duo-tai-xiang-jie/</id>
        <link href="https://ticks8.github.io/post/java-de-duo-tai-xiang-jie/">
        </link>
        <updated>2020-12-09T05:19:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1多态的概念">1.多态的概念</h3>
<p>面向对象语言的三大特征是：封装 继承 多态。</p>
<blockquote>
<p>多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。</p>
</blockquote>
<h3 id="2多态应用实例">2.多态应用实例</h3>
<h4 id="a向上转型">a.向上转型</h4>
<pre><code>class A {
         public void print() {
                  System.out.println(&quot;A:print&quot;);
         }
}

class B extends A {
         public void print() {        
                  System.out.println(&quot;B:print&quot;);
         }
}

class C extends B {
         public void print() {        
                  System.out.println(&quot;C:print&quot;);
         }
}

public class Test{
         public static void func(A a)
         {
                  a.print();
         }

         public static void main(String args[])
         {
                  func(new B());  //等价于 A a =new B();
                  func(new C());  //等价于 C c =new C();
         }
}
</code></pre>
<p>运行结果<br>
<img src="https://ticks8.github.io/post-images/1607522385137.PNG" alt="" loading="lazy"></p>
<blockquote>
<p>可以看到打印的是class B的print,这是因为我们通过子类B去实例化的,所以父类A的print方法已经被子类B的print方法覆盖了.从而打印classB的print.<br>
PS:向上转型时,父类只能调用父类方法或者子类覆写后的方法,而子类中的单独方法则是无法调用的.</p>
</blockquote>
<h4 id="2向下转型">2.向下转型</h4>
<blockquote>
<p>在java中,向下转型则是为了,通过父类强制转换为子类,从而来调用子类独有的方法(向下转型,在工程中很少用到).<br>
为了保证向下转型的顺利完成,在java中提供了一个关键字:instanceof,通过instanceof可以判断某对象是否是某类的实例,如果是则返回true,否则为false</p>
</blockquote>
<pre><code>class A {
         public void print() {
                  System.out.println(&quot;A:print&quot;);
         }
}

class B extends A {
         public void print() {        
                  System.out.println(&quot;B:print&quot;);
         }
         public void funcB(){
                  System.out.println(&quot;funcB&quot;);
         }
}

class C extends A {
         public void print() {        
                  System.out.println(&quot;C:print&quot;);
         }
         public void funcC(){
                  System.out.println(&quot;funcC&quot;);
         }
}

public class Test{
         public static void func(A a)
         {
                  a.print();
                  if(a instanceof B)
                  {
                          B b = (B)a;   //向下转型,通过父类实例化子类
                          b.funcB();    //调用B类独有的方法
                  }
                  else if(a instanceof C)
                  {
                          C c = (C)a;  //向下转型,通过父类实例化子类
                          c.funcC();   //调用C类独有的方法
                  }
         }

         public static void main(String args[])
         {
                  func(new A());   
                  func(new B());
                  func(new C());
         }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://ticks8.github.io/post-images/1607523806806.PNG" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://ticks8.github.io/post/hello-gridea/</id>
        <link href="https://ticks8.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>